#!/bin/bash

### Author: Maxim Kudryashov (m.v.kudryashov@ya.ru) ###

mysql_replica_status=$( sudo docker exec mysql mysql --password={{ deploy_mysql_root_pass }} -e "SHOW REPLICA STATUS\G" | grep Replica_SQL_Running: | awk '{print $2}' )
mysql_custom='sudo docker exec mysql mysql --password={{ deploy_mysql_root_pass }} --skip-column-names'
date_custom=$( date | sed 's/[[:space:]]/_/g' | sed 's/:/-/g' )

touch {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
echo File {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log is created | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
if [ $mysql_replica_status == "Yes" ]; then
     echo Replication is running, script will trying to stop it, please wait | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
     sudo docker exec mysql mysql --password={{ deploy_mysql_root_pass }} -e "STOP REPLICA"
     sleep 5
          if [ $( sudo docker exec mysql mysql --password={{ deploy_mysql_root_pass }} -e "SHOW REPLICA STATUS\G" | grep Replica_SQL_Running: | awk '{print $2}' ) == "Yes" ]; then
               echo Error, cant stop the replication, try again later | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
               exit 1
          else 
               echo Replication is stopped, script will continue the procedure, please wait | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
               sleep 5
          fi
else 
     echo Replication is stopped, script will continue the procedure, please wait | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
     sleep 5
fi

mkdir {{ deploy_mysql_data_src }}/mysql-backup 1>>mysql-backup$date_custom.log 2>&1
echo Directory {{ deploy_mysql_data_src }}/mysql-backup is created, backup will start soon | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
sleep 5

for database in $( $mysql_custom -e  "SHOW DATABASES" );
     do
          mkdir {{ deploy_mysql_data_src }}/mysql-backup/$database 1>>mysql-backup$date_custom.log 2>&1
          echo Directory {{ deploy_mysql_data_src }}/mysql-backup/$database is created | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
          for table in $( $mysql_custom -e "SHOW TABLES FROM $database" ); 
          do
               sudo docker exec mysql mysqldump --password={{ deploy_mysql_root_pass }} --add-drop-database --add-drop-table --add-locks --create-options --disable-keys --extended-insert --single-transaction --quick --set-charset --events --routines --triggers $database $table > {{ deploy_mysql_data_src }}/mysql-backup/$database/$table.sql 2>>mysql-backup$date_custom.log
               echo Backup for table $table of database $database is created | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
          done
     done
tar -zcvf {{ deploy_mysql_data_src }}/mysql-backup.$date_custom.tar.gz {{ deploy_mysql_data_src }}/mysql-backup/ 1>>mysql-backup$date_custom.log 2>&1
echo Archive mysql-backup.$date_custom.tar.gz is created | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
rm -rf {{ deploy_mysql_data_src }}/mysql-backup 1>>mysql-backup$date_custom.log 2>&1
echo Directory {{ deploy_mysql_data_src }}/mysql-backup is removed | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
echo Backup is complete | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
sudo docker exec mysql mysql --password={{ deploy_mysql_root_pass }} -e "START REPLICA"
echo Script is trying to start replication 
sleep 5
if [ $( sudo docker exec mysql mysql --password={{ deploy_mysql_root_pass }} -e "SHOW REPLICA STATUS\G" | grep Replica_SQL_Running: | awk '{print $2}' ) == "Yes" ]; then
     echo Replication is running, ok | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
     exit 0
else 
     echo Replication is stopped, check it manualy | tee -a {{ deploy_mysql_data_src }}/mysql-backup$date_custom.log
     exit 1
fi
exit 0